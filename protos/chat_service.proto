syntax = "proto3";


package connect;
import "user_service.proto";


service ChatService {
  // Bidirectional streaming for real-time chat
  rpc MessageStream(stream Message) returns (stream Message);
  rpc ChatRoom(GetOrCreateChatRoomRequest) returns (ChatResponse);
  rpc VerifyUuid(VerifyUuidRequest) returns (VerifyUuidResponse);
}

message GetOrCreateChatRoomRequest {
  string current_user_uid = 1;
  string other_user_uid = 2;
  string current_user_phone_number = 3;
  ChatSource chat_source = 4; // "phone_number" or "uuid"
}

message Message {
  string id = 1;
  string sender_ref = 2;
  string content = 3;
  string recipient_ref = 4;
  MessageStatus status = 5;
  string chat_room_ref = 6;
  string media_url = 7; // URL of the media file
  int32 timestamp = 8; // Timestamp of the message
  int32 file_size = 9; // Size of the file in bytes
  string local_media_path = 10; // Local path of the media file
  string thumbnail_path = 11; // URL of the thumbnail image
}

message ChatResponse {
  Chat chat = 1;
}

message Chat {
  string id = 1;
  map<string, string> participants_uid = 2;
  string last_message = 3;
  string last_message_sender_ref = 4;
  map<string, int32> last_read_time = 5;
  map<string, int32> unread_counts = 6;
  ChatRequestStatus chat_request_status = 7;
  ChatSource chat_source = 8; 
  bool initiated_by_phone_number = 9;
  MessageType message_type = 10; // text, image, video, audio, file, document, story_reply

  // repeated connect.User participants = 3;
  // string created_at = 4;
  // string updated_at = 5;
  // Message last_message = 6;
  // GroupMetaData group_metadata = 7; // Only for group chats
}

message GroupMetaData {
  string name = 1;
  string description = 2;
  string creation_date = 3;
  connect.User created_by = 4;
  repeated connect.User admins = 5;
  string profile_picture = 6;
}

enum MessageStatus {
  SENDING = 0; // Message is being sent
  SENT = 1; // Message sent but not yet delivered
  DELIVERED = 2; // Message delivered to recipient
  READ = 3; // Message read by recipient
  FAILED = 4; // Failed in sending message
}

enum ChatSource {
  PHONE_NUMBER = 0; // Chat initiated via phone number
  UUID = 1; // Chat initiated via UUID
}

message VerifyUuidRequest {
  string uuid = 1;
}

message VerifyUuidResponse {
  User user = 1;
}

enum ChatRequestStatus {
  PENDING = 0; // Chat is pending
  ACCEPTED = 1; // Chat is accepted
  REJECTED = 2; // Chat is rejected
  // BLOCKED = 3; // Chat is blocked
  // UNBLOCKED = 4; // Chat is unblocked
}

enum MessageType {
  text = 0;
  image = 1;
  video = 2;
  audio = 3;
  file = 4;
  document = 5;
  story_reply = 6;
  other = 7;
}